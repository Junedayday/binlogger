// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package pbmysql

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventType int32

const (
	EventType_UnknownEvent EventType = 0
	EventType_InsertEvent  EventType = 1
	EventType_UpdateEvent  EventType = 2
	EventType_DeleteEvent  EventType = 3
)

var EventType_name = map[int32]string{
	0: "UnknownEvent",
	1: "InsertEvent",
	2: "UpdateEvent",
	3: "DeleteEvent",
}

var EventType_value = map[string]int32{
	"UnknownEvent": 0,
	"InsertEvent":  1,
	"UpdateEvent":  2,
	"DeleteEvent":  3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}

// one column values from old to new
type ColumnValue struct {
	// name of one column
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value of the column,converted to bytes
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// value before
	Before               []byte   `protobuf:"bytes,3,opt,name=before,proto3" json:"before,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColumnValue) Reset()         { *m = ColumnValue{} }
func (m *ColumnValue) String() string { return proto.CompactTextString(m) }
func (*ColumnValue) ProtoMessage()    {}
func (*ColumnValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}

func (m *ColumnValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnValue.Unmarshal(m, b)
}
func (m *ColumnValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnValue.Marshal(b, m, deterministic)
}
func (m *ColumnValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnValue.Merge(m, src)
}
func (m *ColumnValue) XXX_Size() int {
	return xxx_messageInfo_ColumnValue.Size(m)
}
func (m *ColumnValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnValue.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnValue proto.InternalMessageInfo

func (m *ColumnValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColumnValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ColumnValue) GetBefore() []byte {
	if m != nil {
		return m.Before
	}
	return nil
}

// one event include
type Event struct {
	// schema name
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// table name
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// event type
	Et EventType `protobuf:"varint,3,opt,name=et,proto3,enum=pbmysql.EventType" json:"et,omitempty"`
	// all columns names and values exclude id
	Columns []*ColumnValue `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	// used as global unique identifier
	Gtid string `protobuf:"bytes,5,opt,name=gtid,proto3" json:"gtid,omitempty"`
	// timestamp for nano seconds
	NanoTimestamp        int64    `protobuf:"varint,6,opt,name=nano_timestamp,json=nanoTimestamp,proto3" json:"nano_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{1}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Event) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Event) GetEt() EventType {
	if m != nil {
		return m.Et
	}
	return EventType_UnknownEvent
}

func (m *Event) GetColumns() []*ColumnValue {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Event) GetGtid() string {
	if m != nil {
		return m.Gtid
	}
	return ""
}

func (m *Event) GetNanoTimestamp() int64 {
	if m != nil {
		return m.NanoTimestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("pbmysql.EventType", EventType_name, EventType_value)
	proto.RegisterType((*ColumnValue)(nil), "pbmysql.ColumnValue")
	proto.RegisterType((*Event)(nil), "pbmysql.Event")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e) }

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcd, 0x4e, 0xc3, 0x30,
	0x10, 0x84, 0x71, 0xd2, 0x1f, 0x65, 0x53, 0x4a, 0xb5, 0xaa, 0x90, 0x8f, 0x51, 0x24, 0xa4, 0x88,
	0x43, 0x0e, 0xe5, 0x11, 0x80, 0x03, 0x27, 0x90, 0xd5, 0x72, 0x45, 0x4e, 0xbb, 0x40, 0x45, 0x6c,
	0x87, 0xc4, 0x2d, 0xea, 0xfb, 0xf1, 0x60, 0xc8, 0x76, 0x52, 0x71, 0xdb, 0xf9, 0x3c, 0x9a, 0xdd,
	0x31, 0xa4, 0x74, 0x24, 0x6d, 0xcb, 0xa6, 0x35, 0xd6, 0xe0, 0xb4, 0xa9, 0xd4, 0xa9, 0xfb, 0xae,
	0xf3, 0x67, 0x48, 0xef, 0x4d, 0x7d, 0x50, 0xfa, 0x55, 0xd6, 0x07, 0x42, 0x84, 0x91, 0x96, 0x8a,
	0x38, 0xcb, 0x58, 0x91, 0x08, 0x3f, 0xe3, 0x12, 0xc6, 0x47, 0xf7, 0xc8, 0xa3, 0x8c, 0x15, 0x33,
	0x11, 0x04, 0x5e, 0xc3, 0xa4, 0xa2, 0x77, 0xd3, 0x12, 0x8f, 0x3d, 0xee, 0x55, 0xfe, 0xcb, 0x60,
	0xfc, 0xe8, 0x36, 0x39, 0x47, 0xb7, 0xfd, 0x24, 0x25, 0xfb, 0xb4, 0x5e, 0xb9, 0x3c, 0x2b, 0xab,
	0x3a, 0xe4, 0x25, 0x22, 0x08, 0xcc, 0x21, 0x22, 0xeb, 0xb3, 0xe6, 0x2b, 0x2c, 0xfb, 0xf3, 0x4a,
	0x9f, 0xb4, 0x3e, 0x35, 0x24, 0x22, 0xb2, 0x58, 0xc2, 0x74, 0xeb, 0x8f, 0xed, 0xf8, 0x28, 0x8b,
	0x8b, 0x74, 0xb5, 0x3c, 0x1b, 0xff, 0x95, 0x10, 0x83, 0xc9, 0xb5, 0xf9, 0xb0, 0xfb, 0x1d, 0x1f,
	0x87, 0x36, 0x6e, 0xc6, 0x1b, 0x98, 0x6b, 0xa9, 0xcd, 0x9b, 0xdd, 0x2b, 0xea, 0xac, 0x54, 0x0d,
	0x9f, 0x64, 0xac, 0x88, 0xc5, 0xa5, 0xa3, 0xeb, 0x01, 0xde, 0xbe, 0x40, 0x72, 0xde, 0x8d, 0x0b,
	0x98, 0x6d, 0xf4, 0x97, 0x36, 0x3f, 0xda, 0xb3, 0xc5, 0x05, 0x5e, 0x41, 0xfa, 0xa4, 0x3b, 0x6a,
	0x6d, 0x00, 0xcc, 0x81, 0x4d, 0xb3, 0x93, 0x96, 0x02, 0x88, 0x1c, 0x78, 0xa0, 0x9a, 0x06, 0x10,
	0x57, 0x13, 0xff, 0xf3, 0x77, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0x3e, 0x34, 0x3f, 0x88,
	0x01, 0x00, 0x00,
}
